name: build binaries

on:
  push:
    tags:
      - "v*"

jobs:
  build_matrix:
    strategy:
      matrix:
        env: [linux, windows, macos_M1, macos_Intel]
        include:
          - env: linux
            os: ubuntu-latest
            bin: twitchTransFN
            archive: tar.gz
          - env: windows
            os: windows-latest
            bin: twitchTransFN.exe
            archive: zip
          - env: macos_M1
            os: macos-latest
            bin: twitchTransFN.command
            archive: tar.gz
            arch: _arm64
          - env: macos_Intel
            os: macos-latest
            bin: twitchTransFN.command
            archive: tar.gz
            arch: _x86_64
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: upgrade pip and install dependencies
        run: python -m pip install --upgrade pip setuptools wheel

      # Windowsの場合のみPyInstallerのブートローダーを再ビルド
      - name: Clone PyInstaller and Rebuild Bootloader for Windows
        if: matrix.env == 'windows'
        run: |
          git clone https://github.com/pyinstaller/pyinstaller
          cd pyinstaller/bootloader
          python ./waf distclean all
          cd ..
          pip install .

      # LinuxとmacOSの場合にPyInstallerをインストール
      - name: Install PyInstaller for Linux and MacOS
        if: matrix.env != 'windows'
        run: |
          python -m pip install pyinstaller
          if [[ "${{ matrix.env }}" == "macos_M1" ]]; then
            arch="arm64"
          elif [[ "${{ matrix.env }}" == "macos_Intel" ]]; then
            arch="x86_64"
          else
            arch=""
          fi
          echo "arch=$arch" >> $GITHUB_ENV

      - name: install requirements
        run: python -m pip install -r requirements.txt

      - name: Download cacert.pem
        run: |
          curl -o cacert.pem https://curl.se/ca/cacert.pem
          
      - name: Create dist directory
        run: mkdir -p dist

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(grep "version =" twitchTransFN.py | awk -F "'" '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version detected: $VERSION"

      - name: build
        run: python build.py ${{ matrix.env }}

      - name: archive with zip
        if: ${{ matrix.archive == 'zip' }}
        run: powershell Compress-Archive -Path dist/* -DestinationPath twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}.zip

      - name: archive with tar.gz
        if: ${{ matrix.archive == 'tar.gz' }}
        run: |
          if [[ "${{ matrix.env }}" == "macos_M1" || "${{ matrix.env }}" == "macos_Intel" ]]; then
            ARCHIVE_NAME="twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}"
            mv dist "$ARCHIVE_NAME"
            tar -czvf "${ARCHIVE_NAME}.tar.gz" "$ARCHIVE_NAME"
          else
            ARCHIVE_NAME="twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}"
            mv dist "$ARCHIVE_NAME"
            tar -czvf "${ARCHIVE_NAME}.tar.gz" "$ARCHIVE_NAME"
          fi

      - name: update github release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}${{ matrix.arch }}.${{ matrix.archive }}

      - name: Remove dist directory
        run: rm -rf dist
