name: build binaries

on:
  push:
    tags:
      - "v*"

jobs:
  build_matrix:
    strategy:
      matrix:
        env: [linux, windows, macos_M1, macos_Intel]
        include:
          - env: linux
            os: ubuntu-latest
            bin: twitchTransFN
            archive: tar.gz
          - env: windows
            os: windows-latest
            bin: twitchTransFN.exe
            archive: zip
          - env: macos_M1
            os: macos-latest
            bin: twitchTransFN.command
            archive: tar.gz
            arch: _arm64
          - env: macos_Intel
            os: macos-latest
            bin: twitchTransFN.command
            archive: tar.gz
            arch: _x86_64
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: upgrade pip and install dependencies
        run: python -m pip install --upgrade pip setuptools wheel

      # Windowsの場合のみPyInstallerのブートローダーを再ビルド
      - name: Clone PyInstaller and Rebuild Bootloader for Windows
        if: matrix.env == 'windows'
        run: |
          git clone https://github.com/pyinstaller/pyinstaller
          cd pyinstaller/bootloader
          python ./waf distclean all
          cd ..
          pip install .

      # LinuxとmacOSの場合にPyInstallerをインストール
      - name: Install PyInstaller for Linux and MacOS
        if: matrix.env != 'windows'
        run: |
          python -m pip install pyinstaller
          if [[ "${{ matrix.env }}" == "macos_M1" ]]; then
            arch="arm64"
          elif [[ "${{ matrix.env }}" == "macos_Intel" ]]; then
            arch="x86_64"
          else
            arch=""
          fi
          echo "arch=$arch" >> $GITHUB_ENV

      - name: install requirements
        run: python -m pip install -r requirements.txt

      - name: Download cacert.pem
        run: |
          curl -o cacert.pem https://curl.se/ca/cacert.pem
          
      - name: Create dist directory
        run: mkdir -p dist

      - name: Get Version (Unix)
        id: get_version_unix
        if: runner.os != 'Windows'
        run: |
          VERSION=$(grep "version =" twitchTransFN.py | awk -F "'" '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version detected: $VERSION"

      - name: Get Version (Windows)
        id: get_version_windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $content = Get-Content -Path twitchTransFN.py
          $versionLine = $content | Where-Object { $_ -match "version = '(.+)'" }
          $version = $matches[1]
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version detected: $version"

      - name: Set Version Variable
        id: get_version
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "version=${{ steps.get_version_windows.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.get_version_unix.outputs.version }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: build
        run: python build.py ${{ matrix.env }}

      - name: archive with zip
        if: ${{ matrix.archive == 'zip' }}
        run: |
          Copy-Item -Path config.py -Destination dist/
          powershell Compress-Archive -Path dist/* -DestinationPath twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}.zip

      - name: archive with tar.gz
        if: ${{ matrix.archive == 'tar.gz' }}
        run: |
          ARCHIVE_NAME="twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}"
          mv dist "$ARCHIVE_NAME"
          cp config.py "$ARCHIVE_NAME/"
          tar -czvf "${ARCHIVE_NAME}.tar.gz" "$ARCHIVE_NAME"
          echo "Created archive: ${ARCHIVE_NAME}.tar.gz"
          ls -la

      - name: Debug Archive Info (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Matrix env: ${{ matrix.env }}"
          echo "Matrix arch: ${{ matrix.arch }}"
          echo "Version: ${{ steps.get_version.outputs.version }}"
          echo "Archive type: ${{ matrix.archive }}"
          ls -la

      - name: Debug Archive Info (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "Matrix env: ${{ matrix.env }}"
          echo "Matrix arch: ${{ matrix.arch }}"
          echo "Version: ${{ steps.get_version.outputs.version }}"
          echo "Archive type: ${{ matrix.archive }}"
          Get-ChildItem -Force

      - name: List Files Before Release (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Files that should be uploaded:"
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            echo "twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}.zip"
          else
            echo "twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}.tar.gz"
          fi

      - name: List Files Before Release (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "Current directory contents:"
          Get-ChildItem -Force
          echo "Files that should be uploaded:"
          if ("${{ matrix.archive }}" -eq "zip") {
            echo "twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}.zip"
          } else {
            echo "twitchTransFN_${{ steps.get_version.outputs.version }}_${{ matrix.env }}.tar.gz"
          }

      - name: update github release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: "*.${{ matrix.archive }}"
          fail_on_unmatched_files: false

      - name: Remove dist directory (Unix)
        if: runner.os != 'Windows'
        run: rm -rf dist

      - name: Remove dist directory (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (Test-Path dist) {
            Remove-Item -Recurse -Force dist
          }
